module PropertyAssociations

imports Lexical Constant TypeIdentifier
imports PropertyExpressions
imports Modes

exports

  context-free start-symbols
  

  context-free syntax
  	
  	"constant"                    -> Constants{cons("Constants")}
  	
  	%%UniquePropertyIdentifier "=>" "constant" PropertyValue ";"                -> BasicPropertyAssociation{cons("BasicPropertyAssociation")}
  	%%UniquePropertyIdentifier "+=>" "constant" PropertyValue ";"               -> BasicPropertyAssociation{cons("BasicPropertyAssociation")}
  	%%UniquePropertyIdentifier "=>" PropertyValue ";"                -> BasicPropertyAssociation{cons("BasicPropertyAssociation")}
  	%%UniquePropertyIdentifier "+=>"  PropertyValue ";"              -> BasicPropertyAssociation{cons("BasicPropertyAssociation")}
  	
  	UniquePropertyIdentifier "=>" "constant" Assignment InBinding? ";"        -> PropertyAssociation{cons("PropertyAssociation")}
  	UniquePropertyIdentifier "+=>" "constant" Assignment InBinding? ";"       -> PropertyAssociation{cons("PropertyAssociation")}
  	  
  	
  	UniquePropertyIdentifier "=>" Assignment InBinding? ";"        -> PropertyAssociation{cons("PropertyAssociation")}
  	UniquePropertyIdentifier "+=>" Assignment InBinding? ";"       -> PropertyAssociation{cons("PropertyAssociation")}
  	
  	%%"," ContainedModelElementPath     -> ContainedModelElementPaths{cons("ContainedModelElementPaths")} 
  	%%ContainedModelElementPaths+       -> ContainedModelElementPathss{cons("ContainedModelElementPathss")}
  	  
  	UniquePropertyIdentifier "=>"  "constant" Assignment "applies" "to" {ContainedModelElementPath ","}+ InBinding? ";"     -> ContainedPropertyAssociation{cons("ContainedPropertyAssociation")}
  	UniquePropertyIdentifier "=>"  Assignment "applies" "to" {ContainedModelElementPath ","}+ InBinding? ";"                -> ContainedPropertyAssociation{cons("ContainedPropertyAssociation")}
  	  
  	(PropertySetIdentifier "::")? PropertyNameIdentifier -> UniquePropertyIdentifier{cons("UniquePropertyIdentifier")}
  	
  	
  	%%"." ContainedModelElement               -> ContainedModelElements{cons("ContainedModelElements")}  
  	%%ContainedModelElements+                 -> ContainedModelElementss{cons("ContainedModelElementss")}
  	{ContainedModelElement "."}+  -> ContainedModelElementPath{cons("ContainedModelElementPath")}
  	%%AnnexPath  -> ContainedModelElementPath{cons("ContainedModelElementPath")}
  	    
  	Identifier         -> ContainedModelElement
  	%%NamedElementArraySelectionName -> ContainedModelElement
  	
  	%%"annex" AnnexIdentifier "{**" AnnexSpecificPath "**}"   -> AnnexPath{cons("AnnexPath")}
  	  
  	%%"defined by annex"   -> AnnexSpecificPath{cons("StrCon")}  
  	
  	PropertyValue       -> Assignment
  	ModalPropertyValue  -> Assignment
  	
  	PropertyValue InModes ","             -> PropertyValueInMode{cons("PropertyValueInMode")}
  	PropertyValueInMode+                  -> PropertyValueInModes{cons("PropertyValueInModes")}
  	"(" PropertyValueInModes? PropertyValue InModes ")"  -> ModalPropertyValue{cons("ModalPropertyValue")}
  	
  	SinglePropertyValue   -> PropertyValue
  	PropertyListValue     -> PropertyValue
  	
  	PropertyExpression    -> SinglePropertyValue
  	
  	"(" {PropertyListValue ","}+ ")"     -> PropertyListValue{cons("PropertyListValue")}
  	"(" {PropertyExpression ","}+ ")"    -> PropertyListValue{cons("PropertyListValue")}
  	
  	"in" "binding" "(" {PlatformClassifierReference ","}+ ")"    -> InBinding{cons("InBinding")}
  	  
  	ProcessorUniqueComponentClassifierReference           -> PlatformClassifierReference  
  	VirtualProcessorUniqueComponentClassifierReference    -> PlatformClassifierReference
  	BusUniqueComponentClassifierReference                 -> PlatformClassifierReference
  	VirtualBusUniqueComponentClassifierReference          -> PlatformClassifierReference
  	MemoryUniqueComponentClassifierReference              -> PlatformClassifierReference
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  
  	  